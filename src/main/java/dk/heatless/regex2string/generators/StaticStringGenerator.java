package dk.heatless.regex2string.generators;

import dk.heatless.regex2string.GenerationState;
import dk.heatless.regex2string.Generator;

/**
 * A simple generator that always generates the same {@code String} or, if the string is not valid, {@code null}.<br>
 */
public class StaticStringGenerator implements Generator {
	
//Fields
	/**
	 * The string to be generated by the instance.
	 */
	private final String toGenerate;

//Constructors
	/**
	 * Constructs generator that always generates the given string.
	 * @param toGenerate
	 */
	public StaticStringGenerator(String toGenerate){
		if(toGenerate == null){
			throw new IllegalArgumentException("String was null");
		}
		if(toGenerate.length() == 0){
			throw new IllegalArgumentException("String was empty");
		}
		this.toGenerate = toGenerate;
	}

//Methods
	
	@Override
	public GenerationState generate(GenerationState state) {
		return state.step(this.toGenerate);
	}
	
}
